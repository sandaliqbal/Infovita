<project name="Zywee" default="dist" basedir=".">
	<description>
    simple example build file
  </description>
	<!-- set global properties for this build -->
	<property name="src" location="src"/>
	<property name="build" location="build"/>
	<property name="dist" location="dist"/>
	<property name="lib" location="lib"/>
	<property name="result" location="result"/>
	<property name="testng.templates" location="testng-templates"/>
	<property name="tmp.dir" location="tmp"/>
	<property name="class.names" value="com.zywee.test.TestZyweeHomePage,com.zywee.test.TestHospitalsPage"/>
	<path id="classpathdef">
		<fileset dir="${lib}" includes="*.jar" />
		<pathelement location="bin"/>
		<pathelement location="${build}"/>
	</path>

	<target name="print-directory">
		<echo>current directory: ${tmp.dir}</echo>
	</target>

	<taskdef resource="testngtasks" classpath="lib/testng-6.9.4.jar"/>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp/>
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}"/>
		<mkdir dir="${dist}"/>
	</target>

	<target name="compile" depends="init" description="compile the source">
		<!-- Compile the java code from ${src} into ${build} -->
		<javac debug="true" srcdir="${src}" destdir="${build}" classpathref="classpathdef"/>
	</target>

	<target name="dist" depends="compile" description="generate the distribution">
		<!-- Create the distribution directory -->
		<mkdir dir="${dist}/lib"/>

		<!-- Put everything in ${build} into the ZyweeTest.jar file -->
		<jar jarfile="${dist}/lib/ZyweeTest.jar" basedir="${build}"/>
	</target>

	<target name="runJunit" depends="dist">

		<!-- Create the result directory -->
		<mkdir dir="${result}"/>
		<junit printsummary="yes" haltonfailure="yes">
			<classpath refid="classpathdef" />
			<test name="com.zywee.test.TestZyweeHomePage"
	             haltonfailure="no" outfile="result" todir="${result}">
				<formatter type="plain"/>
				<formatter type="xml"/>

			</test>
		</junit>
	</target>

	<target name="test" depends="dist">
		<java classname="org.testng.TestNG">
			<arg line="-testclass ${class.names}" />
			<classpath refid="classpathdef" />
		</java>
	</target>

	<target name="runTestng" depends="dist">
		<!--
		<copy todir="${tmp.dir}" file="${testng.templates}/testfn.xml" overwrite="true">
		      <filterset>
		         <filter token="CLASS" value="${class.name}"/>
		      </filterset>
		</copy>
		-->
		<!-- Assume test.path contains the project library dependencies -->
		<testng haltOnFailure="false" failureProperty="tests.failed" 
			listeners="org.uncommons.reportng.HTMLReporter,org.uncommons.reportng.JUnitXMLReporter">
			<!-- Extra project classpath, which is not included in above "test.path" -->
			<!-- Tell Ant where is the project and test classes -->
			<classpath refid="classpathdef" />
			<classfileset dir="${build}" />
			<!-- Tell Ant what test classes need to run -->
			<!--
			<xmlfileset dir="${tmp.dir}" includes="testfn.xml" />
			-->
		</testng>
		<fail if="tests.failed" message="Tests Failed"/>
		<!--
		<delete dir="${basedir}/test-output-rerun"/>
		<antcall target="ReRunFailedTests"></antcall>
		-->
	</target>

	<target name="ReRunFailedTests" if="tests.failed">
		<echo>ReRunning failed tests...</echo>
		<!-- Assume test.path contains the project library dependencies -->
		<testng outputDir="${basedir}/test-output-rerun" failureProperty="rerun.failed" haltOnFailure="false">
			<classpath location="${build}" />
			<classpath refid="classpathdef" />
			<xmlfileset dir="${basedir}/test-output" includes="testng-failed.xml" />
		</testng>
		<fail if="rerun.failed" message="Tests Failed"/>
	</target>

	<target name="clean" description="clean up">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}"/>
		<delete dir="${dist}"/>
		<delete dir="${result}"/>
		<delete dir="${tmp.dir}"/>
		<delete dir="test-output"/>
		<delete dir="test-output-rerun"/>
	</target>
</project>